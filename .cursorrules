# Правила Cursor для проекта «Компас» (Real Estate App)

Эти правила сделают работу максимально быстрой, предсказуемой и без лишних уточнений.

## Язык и стиль
- По умолчанию отвечай на русском. Технические идентификаторы (имена файлов/переменных/функций) — на английском.
- Пиши кратко и по делу. Для длинных ответов — заголовки и списки; выделяй ключевое **жирным**.
- Всегда обрамляй имена файлов/директорий/функций в `\``: `src/components/Catalog.jsx`, `backend/routes/properties.js`.

## Формат ответов
- Если нужна демонстрация микрофрагмента — покажи минимальный код, иначе вносишь edits в файлы.
- Перед действиями — короткая заметка «что делаю дальше». После — список изменённых файлов и эффект.
- Для ссылок на код используй цитирование с указанием файла и строк:
  ```startLine:endLine:filepath
  // code
  ```

## Ориентация в проекте
- Ключевой документ: `Compass-Concept-001.md`. Следуй продуктовой концепции и доменным правилам.
- Технологии: React (Vite, React Router, Tailwind), Node.js + Express, MongoDB.
- Структура: фронт `src/`, бэк `backend/`, ассеты `public/`.

## Доменные принципы (обязательно)
- Числовые фильтры (цена, площадь, этаж и др.) берут min/max с бэкенда, не с клиентских данных.
- Счётчик подходящих объектов — серверный и учитывает всю базу, не только загруженные карточки.
- Расширение фильтров:
  - Добавь ключи/опции в `src/constants.js`.
  - Обнови фильтрацию/сортировку/пагинацию в `backend/routes/properties.js`.
  - Актуализируй `backend/models/Property.js` при изменении схемы.
- Изображения и галереи — через `src/utils/imagePath.js` и `src/utils/imageLoader.js`.
- UI-тексты — на русском, без «маркетинговых крючков».

## Поток работы
1. Разведка (read-only):
   - Сначала семантический поиск по всему репо, затем прицельно по `src/` и `backend/`.
   - Выполняй независимые поиска/чтения в параллель.
2. Короткий план правок (1–3 пункта) и сразу вносишь edits.
3. Самопроверка: сборка/линтер не ломаются; API/схемы согласованы.
4. Сообщи затронутые файлы и практический эффект для пользователя.

## Стиль кода
- Имена осмысленные и полные; избегай аббревиатур и однобуквенных переменных.
- Ранние возвраты (guard clauses), минимальная вложенность.
- Комментарии — только где действительно нужно объяснить «почему», а не «как».
- Соблюдай текущий формат и не трогай несвязанный код.

## Архитектура и зависимости
- Новые зависимости — только при необходимости, с коротким обоснованием; выбирай минимально достаточные.
- Разделение фронт/бэк строгое. API однородный.
- Изменил схему — синхронизируй `models/Property.js`, фильтры и импортер (`import_data_mongo.js`).

## Сборка и проверки (Windows PowerShell)
- Установка: `npm install` → `cd backend && npm install`.
- Запуск бэкенда: `cd backend && npm start`.
- Запуск фронтенда: `npm run dev`.
- Предлагай команды к запуску без интерактивных шагов; не запускай автоматически.
- После значимых правок: проверь отсутствие ошибок линтера в изменённых файлах и что dev-сервер стартует без ошибок.

## Коммуникация и вопросы
- Спрашивай только если:
  - нужно продуктовое решение/изменение UX;
  - требуется тяжёлая зависимость или изменение публичного API;
  - есть неочевидные вопросы по безопасности/данным.
- Иначе — действуй автономно.

## UX/UI
- Светлая тема, современный кастомный скроллбар и галерея — сохранить стиль.
- Хедер должен плавно скрываться/появляться при скролле.
- Кнопки «забронировать» и «связаться с помощником» ведут к дальнейшим шагам без звонков и регистрации.

## Коммиты (при необходимости)
- Сообщения краткие, в повелительном наклонении: `feat: ...`, `fix: ...`, `refactor: ...`.

—
Следуй этим правилам, чтобы работать быстро, эффективно и сохранять целостность «Компас».
